AWSTemplateFormatVersion: '2010-09-09'
Description: Neo4j ECS Cluster

Parameters:

  Env:
    Type: String
    AllowedValues:
      - stage
      - prod
    Default: stage
    Description: Enter env name

  Neo4jContainerTag:
    Type: String
    Default: latest
    Description: Docker tag

  Neo4jContainerName:
    Type: String
    Default: 410568660038.dkr.ecr.eu-west-2.amazonaws.com/neo4jserver
    Description: Docker name

  ContainerName:
    Type: String
    Default: neo4j-container
    Description: Container name in ECS

  CpuValue:
    Type: Number
    Default: 4096
    Description: Cpu value

  MemoryValue:
    Type: String
    Default: 14GB
    Description: Memory value

  MemoryValueNumber:
    Type: Number
    Default: 14000
    Description: Memory value number

  MinClusterSize:
    Type: Number
    Default: 1
    Description: Min number of instances in the cluster

  MaxClusterSize:
    Type: Number
    Default: 1
    Description: Min number of instances in the cluster

  DefaultVpc:
    Type: String
    Default: vpc-496be521
    Description: Default VPC ID

  ImageId:
    Type: String
    Default: ami-2e9866c5
    Description: Image Id for ECS Cluster

  InstanceType:
    Type: String
    Default: m5.xlarge
    Description: ECS Instance type

Resources:

  Neo4jEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Neo4jCluster-2

  Neo4jEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref Env, neo4j-security-group-2 ]]
      GroupDescription: ECS Security Group
      VpcId: !Ref DefaultVpc
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 7474
          ToPort: 7474
          SourceSecurityGroupId: sg-0faf02aeb0d177c5e
        -
          IpProtocol: tcp
          FromPort: 7473
          ToPort: 7473
          SourceSecurityGroupId: sg-0faf02aeb0d177c5e
        -
          IpProtocol: tcp
          FromPort: 7687
          ToPort: 7687
          SourceSecurityGroupId: sg-0faf02aeb0d177c5e
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Company
          Value: Ringoid
        - Key: Env
          Value: !Ref Env

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  Neo4jEcsClusterLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroups: [ !Ref Neo4jEcsSecurityGroup ]
      KeyName: mikhail
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${Neo4jEcsCluster} >> /etc/ecs/ecs.config
           yum install -y aws-cfn-bootstrap
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Neo4jEcsAutoscalingGroup --region ${AWS::Region}

  Neo4jEcsAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Join [ "-", [ !Ref Env, neo4j-autoscale-group-2 ]]
      LaunchConfigurationName: !Ref Neo4jEcsClusterLaunchConfiguration
      MinSize: !Ref MinClusterSize
      MaxSize: !Ref MaxClusterSize
      HealthCheckType: EC2
      VPCZoneIdentifier:
        - subnet-1552c07c
        - subnet-c8ad73b2
        - subnet-e114f9ad
      Tags:
        - Key: Company
          Value: Ringoid
          PropagateAtLaunch: true
        - Key: Env
          Value: !Ref Env
          PropagateAtLaunch: true

  Neo4jTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join [ "-", [ !Ref Env, neo4j-cluster-family-2 ]]
      ExecutionRoleArn: arn:aws:iam::410568660038:role/ecsTaskExecutionRole
      TaskRoleArn: arn:aws:iam::410568660038:role/ecsTaskExecutionRole
      Cpu: !Ref CpuValue
      Memory: !Ref MemoryValue
      Volumes:
        - Name: my-vol
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !Join [':', [!Ref Neo4jContainerName, !Ref Neo4jContainerTag]]
          Cpu: !Ref CpuValue
          Memory: !Ref MemoryValueNumber
          MemoryReservation: !Ref MemoryValueNumber
          MountPoints:
            - ContainerPath: /data
              SourceVolume: my-vol
            - ContainerPath: /logs
              SourceVolume: my-vol
          PortMappings:
            - ContainerPort: 7474
              HostPort: 7474
            - ContainerPort: 7687
              HostPort: 7687
          Ulimits:
            - Name: nofile
              HardLimit: 100000
              SoftLimit: 100000
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref Neo4jCloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: neo4j

  Neo4jCloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "-", [ !Ref Env, neo4j-logs-2 ]]
      RetentionInDays: 14

  Neo4jService:
    DependsOn: Neo4jLoadBalancerListener
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join [ "-", [ !Ref Env, neo4j-service-2 ]]
      Cluster: !Ref Neo4jEcsCluster
      LaunchType: EC2
      DesiredCount: 1
      TaskDefinition: !Ref Neo4jTaskDefinition
      Role: !Ref ECSServiceRole
      LoadBalancers:
        - TargetGroupArn: !Ref Neo4jLoadBalancerTargetGroup
          ContainerPort: 7474
          ContainerName: !Ref ContainerName

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
            Resource: '*'

  Neo4jLoadBalancer:
    DependsOn: Neo4jLoadBalancerSecurityGroup
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join [ "-", [ !Ref Env, neo4j-elb-2 ]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref Neo4jLoadBalancerSecurityGroup
      Subnets:
        - subnet-1552c07c
        - subnet-c8ad73b2
        - subnet-e114f9ad

  Neo4jLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref Neo4jLoadBalancerTargetGroup
      LoadBalancerArn: !Ref Neo4jLoadBalancer
      Port: 80
      Protocol: HTTP

  Neo4jLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "-", [ !Ref Env, neo4j-elb-security-group-2 ]]
      GroupDescription: ECS Security Group
      VpcId: !Ref DefaultVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  Neo4jLoadBalancerTargetGroup:
    DependsOn: Neo4jLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join [ "-", [ !Ref Env, neo4j-elb-target-group-2 ]]
      Port: 7474
      Protocol: HTTP
      VpcId: !Ref DefaultVpc
